generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  stripeCustomerId String?
  account          Account[]
  events           Event[]
  orders           Order[]
  session          Session[]
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Event {
  id               String       @id @default(uuid())
  title            String
  description      String
  tickets          Int
  price            Decimal      @db.Decimal(10, 2)
  date             DateTime
  location         String?
  featuredImage    String?
  userId           String
  isFeatured       Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  additionalImages Image[]
  orders           Order[]
  ticketTypes      TicketType[]

  @@index([userId], map: "Event_userId_fkey")
}

model TicketType {
  id        String   @id @default(uuid())
  name      String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId], map: "TicketType_eventId_fkey")
}

model Image {
  id      String @id @default(uuid())
  url     String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId], map: "Image_eventId_fkey")
}

model Order {
  id                    String   @id @default(uuid())
  userId                String
  eventId               String
  quantity              Int
  totalAmount           Decimal  @db.Decimal(10, 2)
  paymentStatus         String
  stripeSessionId       String?
  stripePaymentIntentId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  event                 Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId], map: "Order_eventId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}
