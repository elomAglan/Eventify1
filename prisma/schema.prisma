// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql" // ✅ Changement ici
  url      = env("DATABASE_URL")
}

model Account {
  id                    String    @id @default(uuid()) // ✅ MySQL n'a pas cuid, on utilise uuid()
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  stripeCustomerId String?
  account          Account[]
  session          Session[]
  events           Event[]
  orders           Order[]
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Event {
  id               String       @id @default(uuid()) // ✅ cuid -> uuid
  title            String
  description      String
  tickets          Int
  price            Decimal      @db.Decimal(10, 2) // ✅ requis pour MySQL
  date             DateTime
  location         String?
  featuredImage    String?
  additionalImages Image[]
  userId           String
  isFeatured       Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders           Order[]
  ticketTypes      TicketType[]  // Relation vers TicketType
}

model TicketType {
  id        String   @id @default(uuid())
  name      String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id      String  @id @default(uuid())
  url     String
  eventId String
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Order {
  id                   String   @id @default(uuid())
  userId               String
  eventId              String
  quantity             Int
  totalAmount          Decimal  @db.Decimal(10, 2) // ✅ spécifié pour MySQL
  paymentStatus        String
  stripeSessionId      String?
  stripePaymentIntentId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event                Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
